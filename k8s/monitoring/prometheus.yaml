---
# Prometheus Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    istio-injection: enabled

---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring

---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      
      # Inference Router Service
      - job_name: 'inference-router'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: router
        - source_labels: [__meta_kubernetes_service_port_name]
          action: keep
          regex: metrics
        - target_label: __metrics_path__
          replacement: /metrics
      
      # Backend Services
      - job_name: 'inference-backends'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_component]
          action: keep
          regex: inference-backend
        - source_labels: [__meta_kubernetes_service_port_name]
          action: keep
          regex: http
        - target_label: __metrics_path__
          replacement: /health/metrics
        - source_labels: [__meta_kubernetes_service_label_accelerator]
          target_label: accelerator
      
      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          action: keep
          regex: node-exporter
        - source_labels: [__meta_kubernetes_endpoint_node_name]
          target_label: instance
      
      # kube-state-metrics
      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics:8080']
      
      # Custom Metrics Server
      - job_name: 'custom-metrics-server'
        static_configs:
        - targets: ['custom-metrics-server:8080']
        metrics_path: /metrics

  rules.yml: |
    groups:
    - name: inference_sla_rules
      rules:
      # P95 Latency by Model and Accelerator
      - record: inference:p95_latency_ms
        expr: histogram_quantile(0.95, sum(rate(inference_request_duration_seconds_bucket[5m])) by (model_id, accelerator, le)) * 1000
      
      # P99 Latency by Model and Accelerator
      - record: inference:p99_latency_ms
        expr: histogram_quantile(0.99, sum(rate(inference_request_duration_seconds_bucket[5m])) by (model_id, accelerator, le)) * 1000
      
      # Request Rate by Model and Accelerator
      - record: inference:request_rate
        expr: sum(rate(inference_requests_total[5m])) by (model_id, accelerator)
      
      # Error Rate by Model and Accelerator
      - record: inference:error_rate
        expr: sum(rate(inference_requests_total{status=~"4..|5.."}[5m])) by (model_id, accelerator) / sum(rate(inference_requests_total[5m])) by (model_id, accelerator)
      
      # Queue Depth by Accelerator
      - record: inference:queue_depth
        expr: sum(inference_queue_size) by (accelerator)
      
      # Cost per 1K Requests
      - record: inference:cost_per_1k_requests
        expr: (inference_node_cost_per_hour / inference:request_rate) * (1000 / 3600)
      
      # SLA Compliance Rate
      - record: inference:sla_compliance_gold
        expr: (sum(rate(inference_request_duration_seconds_bucket{sla_tier="gold", le="0.05"}[5m])) by (model_id, accelerator) / sum(rate(inference_request_duration_seconds_bucket{sla_tier="gold"}[5m])) by (model_id, accelerator)) * 100
      
      - record: inference:sla_compliance_silver
        expr: (sum(rate(inference_request_duration_seconds_bucket{sla_tier="silver", le="0.15"}[5m])) by (model_id, accelerator) / sum(rate(inference_request_duration_seconds_bucket{sla_tier="silver"}[5m])) by (model_id, accelerator)) * 100

    - name: inference_alerts
      rules:
      # SLA Violation Alerts
      - alert: HighLatencyGoldTier
        expr: inference:p95_latency_ms{sla_tier="gold"} > 50
        for: 2m
        labels:
          severity: critical
          service: inference-router
        annotations:
          summary: "Gold tier SLA violation: P95 latency > 50ms"
          description: "Model {{ $labels.model_id }} on {{ $labels.accelerator }} has P95 latency of {{ $value }}ms, exceeding Gold SLA of 50ms"
      
      - alert: HighLatencySilverTier
        expr: inference:p95_latency_ms{sla_tier="silver"} > 150
        for: 2m
        labels:
          severity: warning
          service: inference-router
        annotations:
          summary: "Silver tier SLA violation: P95 latency > 150ms"
          description: "Model {{ $labels.model_id }} on {{ $labels.accelerator }} has P95 latency of {{ $value }}ms, exceeding Silver SLA of 150ms"
      
      # High Error Rate
      - alert: HighErrorRate
        expr: inference:error_rate > 0.05
        for: 1m
        labels:
          severity: critical
          service: inference-router
        annotations:
          summary: "High error rate detected"
          description: "Model {{ $labels.model_id }} on {{ $labels.accelerator }} has error rate of {{ $value | humanizePercentage }}"
      
      # High Queue Depth
      - alert: HighQueueDepth
        expr: inference:queue_depth > 100
        for: 2m
        labels:
          severity: warning
          service: inference-router
        annotations:
          summary: "High queue depth detected"
          description: "{{ $labels.accelerator }} queue depth is {{ $value }}, indicating potential capacity issues"
      
      # Low SLA Compliance
      - alert: LowSLACompliance
        expr: inference:sla_compliance_gold < 95 or inference:sla_compliance_silver < 98
        for: 5m
        labels:
          severity: warning
          service: inference-router
        annotations:
          summary: "SLA compliance below target"
          description: "Model {{ $labels.model_id }} on {{ $labels.accelerator }} has SLA compliance of {{ $value }}%"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: 400Mi
            cpu: 100m
          limits:
            memory: 2Gi
            cpu: 1000m
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-storage-volume
        emptyDir: {}

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus

---
# Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.6.0
        args:
          - '--path.procfs=/host/proc'
          - '--path.sysfs=/host/sys'
          - '--path.rootfs=/host/root'
          - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        ports:
        - containerPort: 9100
          hostPort: 9100
        resources:
          requests:
            memory: 30Mi
            cpu: 100m
          limits:
            memory: 50Mi
            cpu: 200m
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          mountPropagation: HostToContainer
          readOnly: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      tolerations:
      - operator: Exists

---
# Node Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 9100
    targetPort: 9100
    name: metrics
  selector:
    app: node-exporter

---
# kube-state-metrics Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: monitoring
  labels:
    app: kube-state-metrics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: kube-state-metrics
      containers:
      - name: kube-state-metrics
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2
        ports:
        - containerPort: 8080
        - containerPort: 8081
        resources:
          requests:
            memory: 130Mi
            cpu: 10m
          limits:
            memory: 256Mi
            cpu: 200m
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5

---
# kube-state-metrics ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: monitoring

---
# kube-state-metrics ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  - daemonsets
  - deployments
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]
- apiGroups: ["policy"]
  resources:
  - poddisruptionbudgets
  verbs: ["list", "watch"]
- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
  - storageclasses
  - volumeattachments
  verbs: ["list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs: ["list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  - ingresses
  verbs: ["list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs: ["list", "watch"]

---
# kube-state-metrics ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: monitoring

---
# kube-state-metrics Service
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: monitoring
  labels:
    app: kube-state-metrics
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: http-metrics
  - port: 8081
    targetPort: 8081
    name: telemetry
  selector:
    app: kube-state-metrics
